import{_ as s,c as a,a as e,o as t}from"./app-Dqa0694n.js";const p={};function o(c,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="evenements" tabindex="-1"><a class="header-anchor" href="#evenements"><span>Evénements</span></a></h1><p>Pour exécuter du code à chaque opération du client sirene, vous pouvez écouter les différents événements émis par le client sirene :</p><table><thead><tr><th>Nom</th><th>Evénement</th></tr></thead><tbody><tr><td><code>\\LuFiipe\\InseeSierene\\Events::REQUESTING</code></td><td>Se produit au tout début de la requête.</td></tr><tr><td><code>\\LuFiipe\\InseeSierene\\Events::RATE_LIMIT_REACHED</code></td><td>Se produit lorsque la limite de débit de l&#39;API a été dépassée.</td></tr></tbody></table><p>Exemple :</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Facades<span class="token punctuation">\\</span>Log</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">LuFiipe<span class="token punctuation">\\</span>InseeSierene<span class="token punctuation">\\</span>Events</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">LuFiipe<span class="token punctuation">\\</span>InseeSierene<span class="token punctuation">\\</span>Request<span class="token punctuation">\\</span>Request</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">LuFiipe<span class="token punctuation">\\</span>SimplEvent<span class="token punctuation">\\</span>Event</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name static-context">Event</span><span class="token operator">::</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token class-name static-context">Events</span><span class="token operator">::</span><span class="token constant">REQUESTING</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Request</span> <span class="token variable">$request</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name static-context">Log</span><span class="token operator">::</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Insee Sirene : Requête&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;method&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$request</span><span class="token operator">-&gt;</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;url&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$request</span><span class="token operator">-&gt;</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;body&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$request</span><span class="token operator">-&gt;</span><span class="token function">getRequestBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name static-context">Event</span><span class="token operator">::</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token class-name static-context">Events</span><span class="token operator">::</span><span class="token constant">RATE_LIMIT_REACHED</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token keyword type-hint">int</span> <span class="token variable">$milliseconds</span><span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$retries</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name static-context">Log</span><span class="token operator">::</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Insee Sirene : Rate limiting&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;delay&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$milliseconds</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;retries&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$retries</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Pour plus d&#39;information sur <code>LuFiipe\\SimplEvent\\Event</code> consulter sa <a href="https://github.com/lufiipe/simplevent" target="_blank" rel="noopener noreferrer">documentation</a>.</p>`,6)]))}const i=s(p,[["render",o]]),u=JSON.parse('{"path":"/events.html","title":"Evénements","lang":"fr","frontmatter":{},"headers":[],"git":{"updatedTime":1750409905000,"contributors":[{"name":"Luis-Filipe ANTUNES","username":"","email":"lf.antunes.dasilva@gmail.com","commits":1}],"changelog":[{"hash":"34ae70bb58865cf686cb6461a22bc23d95033548","time":1750409905000,"email":"lf.antunes.dasilva@gmail.com","author":"Luis-Filipe ANTUNES","message":"Initial commit"}]},"filePathRelative":"events.md"}');export{i as comp,u as data};
